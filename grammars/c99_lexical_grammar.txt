A.1 Lexical grammar
(6.4) token:
    keyword
    identifier
    constant
    string-literal
    punctuator
    whitespace
    comments
A.1.2 Keywords
(6.4.1) keyword: one of 
    auto break case char const continue default do double else enum extern float
    for goto if inline int long register restrict return short signed sizeof
    static struct switch typedef union unsigned void volatile while _Bool
    _Complex _Imaginary
A.1.3 Identifiers
(6.4.2.1) identifier:
    identifier-nondigit
    identifier identifier-nondigit
    identifier digit
(6.4.2.1) identifier-nondigit:
    nondigit
    universal-character-name
#   other implementation-defined characters
(6.4.2.1) nondigit: one of
    _ a b c d e f g h i j k l m n o p q r s t u v w x y z
    A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
(6.4.2.1) digit: one of
    0 1 2 3 4 5 6 7 8 9
(6.4.3) universal-character-name:
    \\u hex-quad
    \\U hex-quad hex-quad
(6.4.3) hex-quad:
    hexadecimal-digit hexadecimal-digit
    hexadecimal-digit hexadecimal-digit
A.1.5 Constants
(6.4.4) constant:
    integer-constant
    floating-constant
    enumeration-constant
    character-constant
(6.4.4.1) integer-constant:
    decimal-constant integer-suffix opt
    octal-constant integer-suffix opt
    hexadecimal-constant integer-suffix opt
(6.4.4.1) decimal-constant:
    nonzero-digit
    decimal-constant digit
(6.4.4.1) octal-constant:
    0
    octal-constant octal-digit
(6.4.4.1) hexadecimal-constant:
    hexadecimal-prefix hexadecimal-digit
    hexadecimal-constant hexadecimal-digit
(6.4.4.1) hexadecimal-prefix: one of
    0x 0X
(6.4.4.1) nonzero-digit: one of
    1 2 3 4 5 6 7 8 9
(6.4.4.1) octal-digit: one of
    0 1 2 3 4 5 6 7
(6.4.4.1) hexadecimal-digit: one of
    0 1 2 3 4 5 6 7 8 9
    a b c d e f
    A B C D E F
(6.4.4.1) integer-suffix:
    unsigned-suffix long-suffix opt
    unsigned-suffix long-long-suffix
    long-suffix unsigned-suffix opt
    long-long-suffix unsigned-suffix opt
(6.4.4.1) unsigned-suffix: one of
    u U
(6.4.4.1) long-suffix: one of
    l L
(6.4.4.1) long-long-suffix: one of
    ll LL
(6.4.4.2) floating-constant:
    decimal-floating-constant
    hexadecimal-floating-constant
(6.4.4.2) decimal-floating-constant:
    fractional-constant exponent-part opt floating-suffix opt
    digit-sequence exponent-part floating-suffix opt
(6.4.4.2) hexadecimal-floating-constant:
    hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part floating-suffix opt
    hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part floating-suffix opt
(6.4.4.2) fractional-constant:
    digit-sequence opt . digit-sequence
    digit-sequence .
(6.4.4.2) exponent-part:
    e sign opt digit-sequence
    E sign opt digit-sequence
(6.4.4.2) sign: one of
    + -
(6.4.4.2) digit-sequence:
    digit
    digit-sequence digit
(6.4.4.2) hexadecimal-fractional-constant:
    hexadecimal-digit-sequence opt . hexadecimal-digit-sequence
    hexadecimal-digit-sequence .
(6.4.4.2) binary-exponent-part:
    p sign opt digit-sequence
    P sign opt digit-sequence
(6.4.4.2) hexadecimal-digit-sequence:
    hexadecimal-digit
    hexadecimal-digit-sequence hexadecimal-digit
(6.4.4.2) floating-suffix: one of
    f l F L
(6.4.4.3) enumeration-constant:
    identifier
(6.4.4.4) character-constant:
    ' c-char-sequence '
    L' c-char-sequence '
(6.4.4.4) c-char-sequence:
    c-char
    c-char-sequence c-char
(6.4.4.4) c-char:
    c-char-set
    escape-sequence
(6.4.4.4) c-char-set: none of
    ' \\ \n
(6.4.4.4) escape-sequence:
    simple-escape-sequence
    octal-escape-sequence
    hexadecimal-escape-sequence
    universal-character-name
(6.4.4.4) simple-escape-sequence: one of
    \\' \\" \\? \\ \\a \\b \\f \\n \\r \\t \\v
(6.4.4.4) octal-escape-sequence:
    \\ octal-digit
    \\ octal-digit octal-digit
    \\ octal-digit octal-digit octal-digit
(6.4.4.4) hexadecimal-escape-sequence:
    \\x hexadecimal-digit
    hexadecimal-escape-sequence hexadecimal-digit
A.1.6 String literals
(6.4.5) string-literal:
    " s-char-sequence opt "
    L" s-char-sequence opt "
(6.4.5) s-char-sequence:
    s-char
    s-char-sequence s-char
(6.4.5) s-char: 
    s-char-set
    escape-sequence
(6.4.5) s-char-set: none of
    " \\ \n
A.1.7 Punctuators
(6.4.6) punctuator: one of
    [ ] ( ) { } . ->
    ++ -- & * + - ~ !
    / % << >> < > <= >= == != ^ | && ||
    ? : ; ...
    = *= /= %= += -= <<= >>= &= ^= |=
    , # ##
    <: :> <% %> %: %:%:

#
# The following rules are not found in the original grammar but are described in 
# the spec
#

# XXX Missing trigraph sequences (5.2.1.1)
(6.4) whitespace:
    whitespace-char
    whitespace whitespace-char
(6.4) whitespace-char: one of
    \t \n \r \v \x20
(6.4.9) comments:
    block-comment
    line-comment
(6.4.9) line-comment:
    // line-comment-sequence opt
(6.4.4.4) line-comment-sequence:
    line-comment-char-set
    line-comment-sequence line-comment-char-set
(6.4.9) line-comment-char-set: none of
# This ignores backslash before newline, which should continue the line comment,
# must be handled by the preprocessor
    \n
(6.4.9) block-comment:
# r"/\*(([^*]*)\*[^/]*)*\*/"
    /* block-comment-sequence opt star-char-sequence /
(6.4.9) block-comment-sequence:
    block-comment-element
    block-comment-sequence block-comment-element
(6.4.9) block-comment-element:
# ([^*]|\*+[^/*])
    no-star-char
    star-char-sequence no-bar-star-char-set  
(6.4.9) star-char-sequence:
    *
    star-char-sequence *
(6.4.9) no-bar-star-char-set: none of
    / *
(6.4.9) no-star-char: none of
    *