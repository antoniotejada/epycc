// LALR(1) standalone parsers can be generated via
//   python -m lark.tools.standalone _out\c99_phrase_structure_grammar.lark
// but note this grammar has reduction-reduction conflicts (typedef-name vs. 
// identifier) and will fail to generate the standalone parser, so an Earley 
// parser is used instead
direct_abstract_declarator:  "(" abstract_declarator ")"
  |  direct_abstract_declarator? "[" assignment_expression? "]"
  |  direct_abstract_declarator? "[" "*" "]"
  |  direct_abstract_declarator? "(" parameter_type_list? ")"

postfix_expression:  primary_expression
  |  postfix_expression "[" expression "]"
  |  postfix_expression "(" argument_expression_list? ")"
  |  postfix_expression "." identifier
  |  postfix_expression "->" identifier
  |  postfix_expression "++"
  |  postfix_expression "--"
  |  "(" type_name ")" "{" initializer_list "}"
  |  "(" type_name ")" "{" initializer_list "," "}"

abstract_declarator:  pointer
  |  pointer? direct_abstract_declarator

enum_specifier:  "enum" identifier? "{" enumerator_list "}"
  |  "enum" identifier? "{" enumerator_list "," "}"
  |  "enum" identifier

initializer:  assignment_expression
  |  "{" initializer_list "}"
  |  "{" initializer_list "," "}"

specifier_qualifier_list:  type_specifier specifier_qualifier_list?
  |  type_qualifier specifier_qualifier_list?

argument_expression_list:  assignment_expression
  |  argument_expression_list "," assignment_expression

exclusive_or_expression:  and_expression
  |  exclusive_or_expression "^" and_expression

unary_operator:  "&"
  |  "*"
  |  "+"
  |  "-"
  |  "~"
  |  "!"

init_declarator:  declarator
  |  declarator "=" initializer

relational_expression:  shift_expression
  |  relational_expression "<" shift_expression
  |  relational_expression ">" shift_expression
  |  relational_expression "<=" shift_expression
  |  relational_expression ">=" shift_expression

cast_expression:  unary_expression
  |  "(" type_name ")" cast_expression

initializer_list:  designation? initializer
  |  initializer_list "," designation? initializer

storage_class_specifier:  "typedef"
  |  "extern"
  |  "static"
  |  "auto"
  |  "register"

struct_declaration_list:  struct_declaration
  |  struct_declaration_list struct_declaration

struct_or_union_specifier:  struct_or_union identifier? "{" struct_declaration_list "}"
  |  struct_or_union identifier

additive_expression:  multiplicative_expression
  |  additive_expression "+" multiplicative_expression
  |  additive_expression "-" multiplicative_expression

pointer:  "*" type_qualifier_list?
  |  "*" type_qualifier_list? pointer

function_definition:  declaration_specifiers declarator declaration_list? compound_statement

direct_declarator:  identifier
  |  "(" declarator ")"
  |  direct_declarator "[" type_qualifier_list? assignment_expression? "]"
  |  direct_declarator "[" "static" type_qualifier_list? assignment_expression "]"
  |  direct_declarator "[" type_qualifier_list "static" assignment_expression "]"
  |  direct_declarator "[" type_qualifier_list? "*" "]"
  |  direct_declarator "(" parameter_type_list ")"
  |  direct_declarator "(" identifier_list? ")"

// Defer the difference between identifier and typedef to the lexer (lexer hack)
// (not doing so works for Earley parser but gives reduction reduction conflicts 
// for LALR)
typedef_name : TYPEDEF_NAME

declaration_specifiers:  storage_class_specifier declaration_specifiers?
  |  type_specifier declaration_specifiers?
  |  type_qualifier declaration_specifiers?
  |  function_specifier declaration_specifiers?

declaration_list:  declaration
  |  declaration_list declaration

logical_or_expression:  logical_and_expression
  |  logical_or_expression "||" logical_and_expression

unary_expression:  postfix_expression
  |  "++" unary_expression
  |  "--" unary_expression
  |  unary_operator cast_expression
  |  "sizeof" unary_expression
  |  "sizeof" "(" type_name ")"

identifier_list:  identifier
  |  identifier_list "," identifier

logical_and_expression:  inclusive_or_expression
  |  logical_and_expression "&&" inclusive_or_expression

parameter_type_list:  parameter_list
  |  parameter_list "," "..."

enumerator:  enumeration_constant
  |  enumeration_constant "=" constant_expression

parameter_list:  parameter_declaration
  |  parameter_list "," parameter_declaration

block_item_list:  block_item
  |  block_item_list block_item

conditional_expression:  logical_or_expression
  |  logical_or_expression "?" expression ":" conditional_expression

statement:  labeled_statement
  |  compound_statement
  |  expression_statement
  |  selection_statement
  |  iteration_statement
  |  jump_statement

type_qualifier:  "const"
  |  "restrict"
  |  "volatile"

designator:  "[" constant_expression "]"
  |  "." identifier

struct_declaration:  specifier_qualifier_list struct_declarator_list ";"

assignment_expression:  conditional_expression
  |  unary_expression assignment_operator assignment_expression

and_expression:  equality_expression
  |  and_expression "&" equality_expression

struct_declarator:  declarator
  |  declarator? ":" constant_expression

designator_list:  designator
  |  designator_list designator

init_declarator_list:  init_declarator
  |  init_declarator_list "," init_declarator

struct_declarator_list:  struct_declarator
  |  struct_declarator_list "," struct_declarator

struct_or_union:  "struct"
  |  "union"

selection_statement:  "if" "(" expression ")" statement
  |  "if" "(" expression ")" statement "else" statement
  |  "switch" "(" expression ")" statement

type_qualifier_list:  type_qualifier
  |  type_qualifier_list type_qualifier

labeled_statement:  identifier ":" statement
  |  "case" constant_expression ":" statement
  |  "default" ":" statement

type_name:  specifier_qualifier_list abstract_declarator?

declaration:  declaration_specifiers init_declarator_list? ";"

enumerator_list:  enumerator
  |  enumerator_list "," enumerator

expression_statement:  expression? ";"

declarator:  pointer? direct_declarator

equality_expression:  relational_expression
  |  equality_expression "==" relational_expression
  |  equality_expression "!=" relational_expression

compound_statement:  "{" block_item_list? "}"

shift_expression:  additive_expression
  |  shift_expression "<<" additive_expression
  |  shift_expression ">>" additive_expression

block_item:  declaration
  |  statement

iteration_statement:  "while" "(" expression ")" statement
  |  "do" statement "while" "(" expression ")" ";"
  |  "for" "(" expression? ";" expression? ";" expression? ")" statement
  |  "for" "(" declaration expression? ";" expression? ")" statement

designation:  designator_list "="

assignment_operator:  "="
  |  "*="
  |  "/="
  |  "%="
  |  "+="
  |  "-="
  |  "<<="
  |  ">>="
  |  "&="
  |  "^="
  |  "|="

multiplicative_expression:  cast_expression
  |  multiplicative_expression "*" cast_expression
  |  multiplicative_expression "/" cast_expression
  |  multiplicative_expression "%" cast_expression

constant_expression:  conditional_expression

jump_statement:  "goto" identifier ";"
  |  "continue" ";"
  |  "break" ";"
  |  "return" expression? ";"

translation_unit:  external_declaration
  |  translation_unit external_declaration

parameter_declaration:  declaration_specifiers declarator
  |  declaration_specifiers abstract_declarator?

inclusive_or_expression:  exclusive_or_expression
  |  inclusive_or_expression "|" exclusive_or_expression

function_specifier:  "inline"


primary_expression:  identifier
  |  constant
  |  string_literal
  |  "(" expression ")"

type_specifier:  "void"
  |  "char"
  |  "short"
  |  "int"
  |  "long"
  |  "float"
  |  "double"
  |  "signed"
  |  "unsigned"
  |  "_Bool"
  |  "_Complex"
  |  "_Imaginary"
  |  struct_or_union_specifier
  |  enum_specifier
  |  typedef_name

expression:  assignment_expression
  |  expression "," assignment_expression

external_declaration:  function_definition
  |  declaration



// Start
start:  translation_unit



// Lexer terminals

identifier:  IDENTIFIER

// Note enumeration_constant present in the spec has been removed from constant
// so it doesn't cause reduction-reduction conflicts in primary_expression 
// (hook on primary_expression's identifier to get an enumeration_constant)
constant:  integer_constant
    |  floating_constant
    |  character_constant
  
integer_constant:  DECIMAL_CONSTANT
    |  HEXADECIMAL_CONSTANT
    |  OCTAL_CONSTANT

floating_constant: DECIMAL_FLOATING_CONSTANT
    |  HEXADECIMAL_FLOATING_CONSTANT

enumeration_constant:  identifier

character_constant:   CHARACTER_CONSTANT
string_literal:  STRING_LITERAL

// XXX Missing ignoring slash newline, can't be done with
//     %ignore /\\\n/
//     because Lark splits tokens around that which is wrong

%ignore WS
%ignore C_COMMENT
%ignore CPP_COMMENT

// Adapted from http://www.quut.com/c/ANSI-C-grammar-l-1999.html

// Make sure regexps in an alternative clause appear in length order so the
// longest match is returned first, otherwise integers like 1ULL may be scanned
// as 1UL plus the identifier L see https://github.com/lark-parser/lark/pull/980
D: /[0-9]/
L: /[a-zA-Z_]/
H: /[a-fA-F0-9]/
E: (/[Ee][+-]?/D+)
P: (/[Pp][+-]?/D+)
FS: ("f"|"F"|"l"|"L")
ISS: ("ll"|"LL"|"l"|"L")
ITS: ("u"|"U")
IS: (ISS ITS? | ITS ISS?)?

IDENTIFIER: L (L|D)*

HEXADECIMAL_CONSTANT: /0[xX]/H+IS?
OCTAL_CONSTANT: /0[0-7]*/IS?
DECIMAL_CONSTANT: /[1-9]/D*IS?
CHARACTER_CONSTANT: /L?'(.|[^'\n])+'/
STRING_LITERAL: /L?"(.|[^"\n])*"/

DECIMAL_FLOATING_CONSTANT: D+ E FS? | D*"."D+E?FS? | D+"."D*E?FS?
HEXADECIMAL_FLOATING_CONSTANT: /0[xX]/H+P FS? | /0[xX]/H*"."H+P FS? | /0[xX]/H+"."H*P FS?


// These are defined in common.lark
%import common.WS
%import common.C_COMMENT
%import common.CPP_COMMENT

// XXX Missing lexer hack to tell between "T* t;" declaration and "t * t;" expression
//     This will need handling in the lexer using semantic information from the
//     symbol table to tell the difference between a type and an identifier
//     See https://gist.github.com/MegaIng/a3e6e3debdfd85481e3872fb6261bae0 for a 
//     possible implementation
%declare TYPEDEF_NAME